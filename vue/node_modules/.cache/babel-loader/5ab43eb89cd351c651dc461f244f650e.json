{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\project\\src\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\project\\src\\vue\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\project\\src\\vue\\src\\utils\\request.js","mtime":1686635283745},{"path":"C:\\Users\\Administrator\\Desktop\\project\\src\\vue\\babel.config.js","mtime":1683446153420},{"path":"C:\\Users\\Administrator\\Desktop\\project\\src\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640434318897},{"path":"C:\\Users\\Administrator\\Desktop\\project\\src\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1640434325378}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHJvdXRlciBmcm9tICJAL3JvdXRlciI7CnZhciByZXF1ZXN0ID0gYXhpb3MuY3JlYXRlKHsKICBiYXNlVVJMOiAiL2FwaSIsCiAgdGltZW91dDogNTAwMDAKfSk7IC8vIOivt+axgueZveWQjeWNle+8jOWmguaenOivt+axguWcqOeZveWQjeWNlemHjOmdou+8jOWwhuS4jeS8muiiq+aLpuaIquagoemqjOadg+mZkAoKdmFyIHdoaXRlVXJscyA9IFsiL3VzZXIvbG9naW4iLCAnL3VzZXIvcmVnaXN0ZXInLCAnL3VzZXIvcmVhbE5hbWUnLCAiL3VzZXIvYWx0ZXJQYXNzd29yZCIsICIvdGlja2V0TWFuYWdlciIsICIvdGlja2V0TWFuYWdlci9yZXN0b3JlIiwgIi90aWNrZXRNYW5hZ2VyL21hbmFnZVRyYWluIiwgIi90aWNrZXRNYW5hZ2VyL2RlbGV0ZSIsICIvdGlja2V0TWFuYWdlci9pbnNlcnQiXTsgLy8gcmVxdWVzdCDmi6bmiKrlmagKLy8g5Y+v5Lul6Ieq6K+35rGC5Y+R6YCB5YmN5a+56K+35rGC5YGa5LiA5Lqb5aSE55CGCi8vIOavlOWmgue7n+S4gOWKoHRva2Vu77yM5a+56K+35rGC5Y+C5pWw57uf5LiA5Yqg5a+GCgpyZXF1ZXN0LmludGVyY2VwdG9ycy5yZXF1ZXN0LnVzZShmdW5jdGlvbiAoY29uZmlnKSB7CiAgY29uZmlnLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCc7IC8vIOWPluWHunNlc3Npb25TdG9yYWdl6YeM6Z2i57yT5a2Y55qE55So5oi35L+h5oGvCgogIHZhciB1c2VySnNvbiA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oImlkIik7CiAgY29uc29sZS5sb2codXNlckpzb24pOwogIGNvbnNvbGUubG9nKGNvbmZpZy51cmwpOwoKICBpZiAoIXdoaXRlVXJscy5pbmNsdWRlcyhjb25maWcudXJsKSkgewogICAgLy8g5qCh6aqM6K+35rGC55m95ZCN5Y2VCiAgICBpZiAodXNlckpzb24gPT09ICdudWxsJykgewogICAgICBjb25zb2xlLmxvZyh1c2VySnNvbik7CiAgICAgIHJvdXRlci5wdXNoKCIvbG9naW4iKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhciB1c2VyID0gSlNPTi5wYXJzZSh1c2VySnNvbik7CiAgICAgIGNvbmZpZy5oZWFkZXJzWyd0b2tlbiddID0gdXNlci50b2tlbjsgLy8g6K6+572u6K+35rGC5aS0CiAgICB9CiAgfQoKICByZXR1cm4gY29uZmlnOwp9LCBmdW5jdGlvbiAoZXJyb3IpIHt9KTsgLy8gcmVzcG9uc2Ug5oum5oiq5ZmoCi8vIOWPr+S7peWcqOaOpeWPo+WTjeW6lOWQjue7n+S4gOWkhOeQhue7k+aenAoKcmVxdWVzdC5pbnRlcmNlcHRvcnMucmVzcG9uc2UudXNlKGZ1bmN0aW9uIChyZXNwb25zZSkgewogIHZhciByZXMgPSByZXNwb25zZS5kYXRhOyAvLyDlpoLmnpzmmK/ov5Tlm57nmoTmlofku7YKCiAgaWYgKHJlc3BvbnNlLmNvbmZpZy5yZXNwb25zZVR5cGUgPT09ICdibG9iJykgewogICAgcmV0dXJuIHJlczsKICB9IC8vIOWFvOWuueacjeWKoeerr+i/lOWbnueahOWtl+espuS4suaVsOaNrgoKCiAgaWYgKHR5cGVvZiByZXMgPT09ICdzdHJpbmcnKSB7CiAgICByZXMgPSByZXMgPyBKU09OLnBhcnNlKHJlcykgOiByZXM7CiAgfSAvLyDpqozor4F0b2tlbgoKCiAgaWYgKHJlcy5jb2RlID09PSAnNDAxJykgewogICAgY29uc29sZS5lcnJvcigidG9rZW7ov4fmnJ/vvIzph43mlrDnmbvlvZUiKTsKICAgIHJvdXRlci5wdXNoKCIvbG9naW4iKTsKICB9CgogIHJldHVybiByZXM7Cn0sIGZ1bmN0aW9uIChlcnJvcikgewogIGNvbnNvbGUubG9nKCdlcnInICsgZXJyb3IpOyAvLyBmb3IgZGVidWcKCiAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKfSk7CmV4cG9ydCBkZWZhdWx0IHJlcXVlc3Q7"},{"version":3,"sources":["C:/Users/Administrator/Desktop/project/src/vue/src/utils/request.js"],"names":["axios","router","request","create","baseURL","timeout","whiteUrls","interceptors","use","config","headers","userJson","sessionStorage","getItem","console","log","url","includes","push","user","JSON","parse","token","error","response","res","data","responseType","code","Promise","reject"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,MADgB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,IAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,gBAAhB,EAAiC,gBAAjC,EAAkD,qBAAlD,EAAwE,gBAAxE,EAAyF,wBAAzF,EAClB,4BADkB,EACW,uBADX,EACmC,uBADnC,CAAlB,C,CAGA;AACA;AACA;;AACAJ,OAAO,CAACK,YAAR,CAAqBL,OAArB,CAA6BM,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,IAAvB,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACO,GAAnB;;AACA,MAAI,CAACV,SAAS,CAACW,QAAV,CAAmBR,MAAM,CAACO,GAA1B,CAAL,EAAqC;AAAG;AACpC,QAAGL,QAAQ,KAAK,MAAhB,EAAwB;AACpBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAV,MAAAA,MAAM,CAACiB,IAAP,CAAY,QAAZ;AACH,KAHD,MAGO;AACH,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWV,QAAX,CAAX;AACAF,MAAAA,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BS,IAAI,CAACG,KAA/B,CAFG,CAEoC;AAC1C;AACJ;;AACD,SAAOb,MAAP;AACH,CAjBD,EAiBG,UAAAc,KAAK,EAAI,CAEX,CAnBD,E,CAqBA;AACA;;AACArB,OAAO,CAACK,YAAR,CAAqBiB,QAArB,CAA8BhB,GAA9B,CACI,UAAAgB,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAACf,MAAT,CAAgBkB,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGL,IAAI,CAACC,KAAL,CAAWI,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;AACpBd,IAAAA,OAAO,CAACS,KAAR,CAAc,cAAd;AACAtB,IAAAA,MAAM,CAACiB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOO,GAAP;AACH,CAjBL,EAkBI,UAAAF,KAAK,EAAI;AACLT,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQQ,KAApB,EADK,CACsB;;AAC3B,SAAOM,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACH,CArBL;AAwBA,eAAerB,OAAf","sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\n\nconst request = axios.create({\n    baseURL: \"/api\",\n    timeout: 50000\n})\n\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\nconst whiteUrls = [\"/user/login\", '/user/register','/user/realName',\"/user/alterPassword\",\"/ticketManager\",\"/ticketManager/restore\",\n\"/ticketManager/manageTrain\",\"/ticketManager/delete\",\"/ticketManager/insert\"]\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // 取出sessionStorage里面缓存的用户信息\n    let userJson = sessionStorage.getItem(\"id\")\n    console.log(userJson)\n    console.log(config.url);\n    if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n        if(userJson === 'null') {\n            console.log(userJson)\n            router.push(\"/login\")\n        } else {\n            let user = JSON.parse(userJson);\n            config.headers['token'] = user.token;  // 设置请求头\n        }\n    }\n    return config\n}, error => {\n\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // 验证token\n        if (res.code === '401') {\n            console.error(\"token过期，重新登录\")\n            router.push(\"/login\")\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\nexport default request\n\n"]}]}