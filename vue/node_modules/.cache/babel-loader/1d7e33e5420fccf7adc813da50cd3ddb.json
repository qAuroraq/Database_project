{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\project\\源代码\\vue\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\project\\源代码\\vue\\src\\utils\\request.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\project\\源代码\\vue\\src\\utils\\request.js","mtime":1641063626705},{"path":"C:\\Users\\Administrator\\Desktop\\project\\源代码\\vue\\babel.config.js","mtime":1640434357542},{"path":"C:\\Users\\Administrator\\Desktop\\project\\源代码\\vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1640434318897},{"path":"C:\\Users\\Administrator\\Desktop\\project\\源代码\\vue\\node_modules\\babel-loader\\lib\\index.js","mtime":1640434325378}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJzsKaW1wb3J0IHJvdXRlciBmcm9tICJAL3JvdXRlciI7CnZhciByZXF1ZXN0ID0gYXhpb3MuY3JlYXRlKHsKICBiYXNlVVJMOiAiL2FwaSIsCiAgdGltZW91dDogNTAwMAp9KTsgLy8g6K+35rGC55m95ZCN5Y2V77yM5aaC5p6c6K+35rGC5Zyo55m95ZCN5Y2V6YeM6Z2i77yM5bCG5LiN5Lya6KKr5oum5oiq5qCh6aqM5p2D6ZmQCgp2YXIgd2hpdGVVcmxzID0gWyIvdXNlci9sb2dpbiIsICcvdXNlci9yZWdpc3RlcicsICcvdXNlci9yZWFsTmFtZSddOyAvLyByZXF1ZXN0IOaLpuaIquWZqAovLyDlj6/ku6Xoh6ror7fmsYLlj5HpgIHliY3lr7nor7fmsYLlgZrkuIDkupvlpITnkIYKLy8g5q+U5aaC57uf5LiA5YqgdG9rZW7vvIzlr7nor7fmsYLlj4LmlbDnu5/kuIDliqDlr4YKCnJlcXVlc3QuaW50ZXJjZXB0b3JzLnJlcXVlc3QudXNlKGZ1bmN0aW9uIChjb25maWcpIHsKICBjb25maWcuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04JzsgLy8g5Y+W5Ye6c2Vzc2lvblN0b3JhZ2Xph4zpnaLnvJPlrZjnmoTnlKjmiLfkv6Hmga8KCiAgdmFyIHVzZXJKc29uID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgiaWQiKTsKICBjb25zb2xlLmxvZyh1c2VySnNvbik7CgogIGlmICghd2hpdGVVcmxzLmluY2x1ZGVzKGNvbmZpZy51cmwpKSB7CiAgICAvLyDmoKHpqozor7fmsYLnmb3lkI3ljZUKICAgIGlmICh1c2VySnNvbiA9PT0gJ251bGwnKSB7CiAgICAgIGNvbnNvbGUubG9nKHVzZXJKc29uKTsKICAgICAgcm91dGVyLnB1c2goIi9sb2dpbiIpOwogICAgfSBlbHNlIHsKICAgICAgdmFyIHVzZXIgPSBKU09OLnBhcnNlKHVzZXJKc29uKTsKICAgICAgY29uZmlnLmhlYWRlcnNbJ3Rva2VuJ10gPSB1c2VyLnRva2VuOyAvLyDorr7nva7or7fmsYLlpLQKICAgIH0KICB9CgogIHJldHVybiBjb25maWc7Cn0sIGZ1bmN0aW9uIChlcnJvcikge30pOyAvLyByZXNwb25zZSDmi6bmiKrlmagKLy8g5Y+v5Lul5Zyo5o6l5Y+j5ZON5bqU5ZCO57uf5LiA5aSE55CG57uT5p6cCgpyZXF1ZXN0LmludGVyY2VwdG9ycy5yZXNwb25zZS51c2UoZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgdmFyIHJlcyA9IHJlc3BvbnNlLmRhdGE7IC8vIOWmguaenOaYr+i/lOWbnueahOaWh+S7tgoKICBpZiAocmVzcG9uc2UuY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ2Jsb2InKSB7CiAgICByZXR1cm4gcmVzOwogIH0gLy8g5YW85a655pyN5Yqh56uv6L+U5Zue55qE5a2X56ym5Liy5pWw5o2uCgoKICBpZiAodHlwZW9mIHJlcyA9PT0gJ3N0cmluZycpIHsKICAgIHJlcyA9IHJlcyA/IEpTT04ucGFyc2UocmVzKSA6IHJlczsKICB9IC8vIOmqjOivgXRva2VuCgoKICBpZiAocmVzLmNvZGUgPT09ICc0MDEnKSB7CiAgICBjb25zb2xlLmVycm9yKCJ0b2tlbui/h+acn++8jOmHjeaWsOeZu+W9lSIpOwogICAgcm91dGVyLnB1c2goIi9sb2dpbiIpOwogIH0KCiAgcmV0dXJuIHJlczsKfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgY29uc29sZS5sb2coJ2VycicgKyBlcnJvcik7IC8vIGZvciBkZWJ1ZwoKICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpOwp9KTsKZXhwb3J0IGRlZmF1bHQgcmVxdWVzdDs="},{"version":3,"sources":["C:/Users/Administrator/Desktop/project/源代码/vue/src/utils/request.js"],"names":["axios","router","request","create","baseURL","timeout","whiteUrls","interceptors","use","config","headers","userJson","sessionStorage","getItem","console","log","includes","url","push","user","JSON","parse","token","error","response","res","data","responseType","code","Promise","reject"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,IAAMC,OAAO,GAAGF,KAAK,CAACG,MAAN,CAAa;AACzBC,EAAAA,OAAO,EAAE,MADgB;AAEzBC,EAAAA,OAAO,EAAE;AAFgB,CAAb,CAAhB,C,CAKA;;AACA,IAAMC,SAAS,GAAG,CAAC,aAAD,EAAgB,gBAAhB,EAAiC,gBAAjC,CAAlB,C,CAEA;AACA;AACA;;AACAJ,OAAO,CAACK,YAAR,CAAqBL,OAArB,CAA6BM,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACvCA,EAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADuC,CAGvC;;AACA,MAAIC,QAAQ,GAAGC,cAAc,CAACC,OAAf,CAAuB,IAAvB,CAAf;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,MAAI,CAACL,SAAS,CAACU,QAAV,CAAmBP,MAAM,CAACQ,GAA1B,CAAL,EAAqC;AAAG;AACpC,QAAGN,QAAQ,KAAK,MAAhB,EAAwB;AACpBG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACAV,MAAAA,MAAM,CAACiB,IAAP,CAAY,QAAZ;AACH,KAHD,MAGO;AACH,UAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWV,QAAX,CAAX;AACAF,MAAAA,MAAM,CAACC,OAAP,CAAe,OAAf,IAA0BS,IAAI,CAACG,KAA/B,CAFG,CAEoC;AAC1C;AACJ;;AACD,SAAOb,MAAP;AACH,CAhBD,EAgBG,UAAAc,KAAK,EAAI,CAEX,CAlBD,E,CAoBA;AACA;;AACArB,OAAO,CAACK,YAAR,CAAqBiB,QAArB,CAA8BhB,GAA9B,CACI,UAAAgB,QAAQ,EAAI;AACR,MAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADQ,CAER;;AACA,MAAIF,QAAQ,CAACf,MAAT,CAAgBkB,YAAhB,KAAiC,MAArC,EAA6C;AACzC,WAAOF,GAAP;AACH,GALO,CAMR;;;AACA,MAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;AACzBA,IAAAA,GAAG,GAAGA,GAAG,GAAGL,IAAI,CAACC,KAAL,CAAWI,GAAX,CAAH,GAAqBA,GAA9B;AACH,GATO,CAUR;;;AACA,MAAIA,GAAG,CAACG,IAAJ,KAAa,KAAjB,EAAwB;AACpBd,IAAAA,OAAO,CAACS,KAAR,CAAc,cAAd;AACAtB,IAAAA,MAAM,CAACiB,IAAP,CAAY,QAAZ;AACH;;AACD,SAAOO,GAAP;AACH,CAjBL,EAkBI,UAAAF,KAAK,EAAI;AACLT,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQQ,KAApB,EADK,CACsB;;AAC3B,SAAOM,OAAO,CAACC,MAAR,CAAeP,KAAf,CAAP;AACH,CArBL;AAyBA,eAAerB,OAAf","sourcesContent":["import axios from 'axios'\nimport router from \"@/router\";\n\nconst request = axios.create({\n    baseURL: \"/api\",\n    timeout: 5000\n})\n\n// 请求白名单，如果请求在白名单里面，将不会被拦截校验权限\nconst whiteUrls = [\"/user/login\", '/user/register','/user/realName']\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n    // 取出sessionStorage里面缓存的用户信息\n    let userJson = sessionStorage.getItem(\"id\")\n    console.log(userJson)\n    if (!whiteUrls.includes(config.url)) {  // 校验请求白名单\n        if(userJson === 'null') {\n            console.log(userJson)\n            router.push(\"/login\")\n        } else {\n            let user = JSON.parse(userJson);\n            config.headers['token'] = user.token;  // 设置请求头\n        }\n    }\n    return config\n}, error => {\n\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n    response => {\n        let res = response.data;\n        // 如果是返回的文件\n        if (response.config.responseType === 'blob') {\n            return res\n        }\n        // 兼容服务端返回的字符串数据\n        if (typeof res === 'string') {\n            res = res ? JSON.parse(res) : res\n        }\n        // 验证token\n        if (res.code === '401') {\n            console.error(\"token过期，重新登录\")\n            router.push(\"/login\")\n        }\n        return res;\n    },\n    error => {\n        console.log('err' + error) // for debug\n        return Promise.reject(error)\n    }\n)\n\n\nexport default request\n\n"]}]}